<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root[ 
<!ELEMENT Article ANY>
<!ATTLIST Article id ID #REQUIRED>
<!ELEMENT AuthorProfile ANY>
<!ATTLIST AuthorProfile id ID #REQUIRED>
<!ELEMENT Folder ANY>
<!ATTLIST Folder id ID #REQUIRED>
<!ELEMENT Home ANY>
<!ATTLIST Home id ID #REQUIRED>
<!ELEMENT Page ANY>
<!ATTLIST Page id ID #REQUIRED>
<!ELEMENT Search ANY>
<!ATTLIST Search id ID #REQUIRED>

]>
<root id="-1">
  <Home id="1047" parentID="-1" level="1" writerID="0" creatorID="0" nodeType="1045" template="1046" sortOrder="0" createDate="2012-10-30T00:45:58" updateDate="2012-10-31T17:36:37" nodeName="Home" urlName="home" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047" isDoc="">
    <footerText><![CDATA[<p>All content is licensed under the <a href="http://opensource.org/licenses/MIT" target="_blank">MIT license</a>.</p>]]></footerText>
    <headerText>Community Survey</headerText>
    <headerClass>project-icon</headerClass>
    <headerSubtext><![CDATA[<p>There's a community survey floating around the web about DCPU-16 - <a href="https://docs.google.com/spreadsheet/viewform?formkey=dEViZHZiMFc1SzRrS0R0SktOTWhJMEE6MQ" target="_blank">take a look</a>!</p>]]></headerSubtext>
    <Folder id="1055" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1052" template="0" sortOrder="0" createDate="2012-10-30T19:50:28" updateDate="2012-10-30T19:50:30" nodeName="Articles" urlName="articles" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055" isDoc="">
      <Article id="1092" parentID="1055" level="3" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="4" createDate="2012-10-31T16:25:54" updateDate="2012-11-01T14:35:47" nodeName="Getting the Tools for DCPU-16 Programming" urlName="getting-the-tools-for-dcpu-16-programming" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055,1092" isDoc="">
        <featured>1</featured>
        <summary><![CDATA[<?UMBRACO_MACRO macroAlias="YouTubeVideo" videoid="http://youtu.be/vQwOUhf-AfI" />]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<?UMBRACO_MACRO macroAlias="YouTubeVideo" videoid="http://youtu.be/vQwOUhf-AfI" />
<p>If you're ready to learn how to work with DCPU-16, you'll need to get the tools. First, let's describe a few things:</p>
<ul>
<li><strong>Code</strong> - You'll be writing code in assembly that's stored as plaintext files locally.</li>
<li><strong>Assembler</strong> - Assemblers are tools that turn your assembly code into an executable binary.</li>
<li><strong>Emulator</strong> - An emulator simulates a DCPU-16 in order to execute binary files from the assembler.</li>
</ul>
<p>You'll need to get a handle on each of these things.</p>
<blockquote>
<p>You need a text editor, too. For Windows, I suggest <a href="http://notepad-plus-plus.org/" target="_blank">Notepad++</a>. For Mac, I suggest <a href="http://www.sublimetext.com/" target="_blank">Sublime Text</a>. If you're on Linux, you probably already have a favorite text editor.</p>
</blockquote>
<h4>Choosing an Assembler</h4>
<p>There are a huge number of assemblers out there to choose from, but most of them are pet projects that aren't practical for normal use. Your real choice these days boils down to two options:</p>
<ul>
<li><a href="https://github.com/SirCmpwn/Organic" target="_blank">Organic</a> - Written by myself, this assembler has the most extensibility and flexibility of any assembler out there.</li>
<li><a href="http://dcputoolcha.in/" target="_blank">DCPU Toolchain</a> - A strong collaborative effort, the toolchain offers a large number of tools written in C.</li>
</ul>
<blockquote>
<p>Want a C compiler? Go with the DCPU Toolchain. Don't need that? Go with Organic.</p>
</blockquote>
<p>For the sake of these articles, I assume that you've choosen Organic. If you have gone with the toolchain, most of these articles will be roughly compatible. You'll need to install Mono before you can use Organic on Linux or Mac.</p>
<h4>Choosing an Emulator</h4>
<p>Again, there are a huge number of emulators out there, but most of them aren't too great. It again boils down to basically two choices:</p>
<ul>
<li><a href="https://github.com/SirCmpwn/Tomato" target="_blank">Lettuce</a> - A powerful graphical debugger that can integrate deeply with Organic to provide a better debugging experience.</li>
<li><a href="http://dcputoolcha.in/" target="_blank">DCPU Toolchain</a> - The toolchain debugger is a powerful command-line based tool with a good Lua scripting interface.</li>
</ul>
<p>Organic and Lettuce combined are part of the BLT stack. You can also mix and match tools from the toolchain and the BLT stack, or most other assemblers and emulators.</p>
<h4><a name="testing-out-the-tools"></a>Testing Out the Tools</h4>
<p>Once you've downloaded your tools, create a directory to work in and place them there. Let's test them out by creating a file called "helloworld.dasm" and putting the following code within. Don't worry if you can't understand it, we're just trying to make sure everything is set up properly.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/c8a20ccf1fb1aec2366a" macroAlias="Gist" />
<p>Save this file and drag the file on to <span class="inline-code">organic.exe</span>. You'll see <span class="inline-code">helloworld.bin</span> appear, and you can drag this on to <span class="inline-code">lettuce.exe</span>. Click accept on the window that appears, then press F5, and you should see the screen say "Hello, world!"</p>
<blockquote>
<p>If you're on Linux or Mac, you probably can't just drag and drop these. Try running this from a terminal: <span class="inline-code">mono Organic.exe helloworld.dasm</span> and <span class="inline-code">mono Lettuce.exe helloworld.bin</span></p>
</blockquote>
<h4>Resources</h4>
<p>You should bookmark these now, before you get too far in:</p>
<ul>
<li><a href="http://dcpu.com/" target="_blank">Official DCPU-16 Documentation</a></li>
<li><a href="http://www.reddit.com/r/dcpu16/" target="_blank">DCPU-16 on Reddit</a></li>
</ul>
<p><em>This is part of a series on getting started with DCPU-16 programming. <a href="/{localLink:1099}" title="How DCPU-16 Works">Click here</a> to read the next article.</em></p>]]></bodyText>
      </Article>
      <Article id="1098" parentID="1055" level="3" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="5" createDate="2012-11-01T00:51:18" updateDate="2012-11-01T01:28:07" nodeName="An interview with Matt Bell, creator of 0x10co.de" urlName="an-interview-with-matt-bell,-creator-of-0x10code" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055,1098" isDoc="">
        <featured>0</featured>
        <summary><![CDATA[<p>Matt Bell, aka Mappum, is the creator of <a href="http://0x10co.de" target="_blank">0x10co.de</a>, the most popular DCPU-16 tool on the web, and one linked to by <a href="http://dcpu.com" target="_blank">Notch himself</a> in the sidebar of the official DCPU-16 website. He dropped by to chat us up with an interview.</p>]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<p>Matt Bell, aka Mappum, is the creator of <a href="http://0x10co.de" target="_blank">0x10co.de</a>, the most popular DCPU-16 tool on the web, and one linked to by <a href="http://dcpu.com" target="_blank">Notch himself</a> in the sidebar of the official DCPU-16 website.</p>
<p><strong>For people who already don't know about it, describe 0x10co.de in a few sentences.</strong></p>
<p>0x10code is a website for quickly and easily sharing your DCPU programs. It works like a pastebin, but it also includes an emulator so you can conveniently test programs right in your browser.</p>
<p><strong>So, your site was <a href="https://fr.twitter.com/notch/status/190000276806184960" target="_blank">tweeted by Notch</a>, what do you think of that?</strong></p>
<p>It think it is awesome that Notch liked my work enough to tweet it! That one tweet brought hundreds of thousands of visitors to the site, and hopefully helped show people how cool DCPU programming is.</p>
<p><strong>Your site is one of the most used tools in the community, according to a <a href="https://docs.google.com/spreadsheet/viewanalytics?formkey=dEViZHZiMFc1SzRrS0R0SktOTWhJMEE6MQ" target="_blank">recent survey</a>. How are you holding up with that kind of pressure?</strong></p>
<p>The pressure has pushed me to start making some big improvements to the site. As of now, I haven't put too much effort into making it better, but now I see that it is used widely enough that it will be worth it to help the community.</p>
<p><strong>What are these big plans for the future of 0x10co.de?</strong></p>
<p>So far, the focus of the site has been towards quickly sharing code. However, people are also using it as their IDE since being web-based makes it more accessible than some of the other tools. I plan to cater towards these people by improving the development tools (adding breakpoints, working on the assembler, adding a better debug view, etc.).</p>
<p><strong>Do you think those sorts of features will compare to some of the more popular desktop debuggers?</strong></p>
<p>There will probably always be something better, but I can still try to make it as useful as I can for the people who are using it as their main development environment.</p>
<p><strong>You think you can do it alone, or are you hoping for contributions from the community?</strong></p>
<p>There have already been various contributions from the community that have improved both the site and the emulator that runs the code. You can send me a pull request at <a href="https://github.com/mappum/0x10code" target="_blank">https://github.com/mappum/0x10code</a> or <a href="https://github.com/mappum/DCPU-16" target="_blank">https://github.com/mappum/DCPU-16</a> if you think something should be fixed or changed.</p>
<p><strong>Thanks for chatting with us. Anything else you'd like to mention?</strong></p>
<p>I would like to remind everyone to join the 0x10code corporation in 0x10c when it comes out. We will have the best DCPU software in the multiverse!</p>]]></bodyText>
      </Article>
      <Article id="1099" parentID="1055" level="3" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="6" createDate="2012-11-01T11:27:35" updateDate="2012-11-01T22:02:11" nodeName="How DCPU-16 Works" urlName="how-dcpu-16-works" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055,1099" isDoc="">
        <featured>0</featured>
        <summary><![CDATA[<p>Now that you have your tools set up for use, now let's take a moment to talk about how DCPU-16 actually works, and by extension, how the computer you're using now actually works!</p>
<p>This article is awfully technical, but try to power through it - this is important stuff.</p>]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<?UMBRACO_MACRO macroAlias="YouTubeVideo" videoid="http://www.youtube.com/watch?v=4JTj2gCe4Qo" />
<p>Now that you have your tools set up for use, now let's take a moment to talk about how DCPU-16 actually works, and by extension, how the computer you're using now actually works!</p>
<blockquote>
<p>This article is meant to introduce you to low-level concepts that apply to computing in general. <a href="/{localLink:1101}" title="Getting a Feel for Assembly">Click here</a> to skip it.</p>
</blockquote>
<p>This article is awfully technical, but try to power through it - this is important stuff.</p>
<h4>Required Reading</h4>
<p>I can't possibly teach you everything, so here's a list of useful things to read before we move on:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Binary_numeral_system" target="_blank">Binary</a> - No need to read it all, but you should understand how it works</li>
<li><a href="http://en.wikipedia.org/wiki/Hexadecimal" target="_blank">Hexadecimal</a> (aka "hex") - Ditto</li>
<li><a href="http://en.wikipedia.org/wiki/Signed_number_representations" target="_blank">Signed Numbers</a> - How negative numbers work in computing</li>
</ul>
<blockquote>
<p>I refer to "bits" a lot. The articles above don't explain it well - a bit is a binary digit. If I say a number is 4-bit, that means the maximum value is 1111 (in binary). 8-bit numbers can go up to 11111111, and so on.</p>
</blockquote>
<h4>What's in a DCPU</h4>
<p>Let's pretend for a moment that the DCPU-16 actually exists, and how it would be designed if it did. Your computer includes several things - the actual DCPU, 128 KiB of memory, and all the attached devices like screens and keyboards. Let's start with memory.</p>
<h4>DCPU Memory</h4>
<blockquote>
<p>Sometimes, we use hexadecimal notation to refer to numbers (think back to that required reading above). These are notated with "0x" beforehand - 123 in decimal is written as 0x7B. We also tend to pad these until they're 4 digits long, like 0x007B, because the maximum number a DCPU can use with is 0xFFFF. We also refer to numbers in binary with "0b", such as 0b10101011.</p>
</blockquote>
<p>So, your device contains 0x10000 (or 128 KiB) words of memory. This memory consists of a number of <strong>words</strong>. A word is a 16-bit unsigned number (between 0 and 65535, or 0x0000-0xFFFF). Each word is assigned an <strong>address</strong>, which you can use to refer to it. Typically, addresses are referred to in hexadecimal - some value between 0x0000 and 0xFFFF. For example, let's simplify it and assume that there are only 16 words of memory, and that they look like this (in hex):</p>
<p><span class="code">0000 1234 0000 BEEF 0000 FACE 0000 4321 0000 0000 0000 0000 0000 0000 0000 0000</span></p>
<p>We could think of the first value as being located at address <span class="inline-code">0x0000</span>, and its value is <span class="inline-code">0x0000</span>. The value <span class="inline-code">0x1234</span> is located at address <span class="inline-code">0x0001</span>, and the value <span class="inline-code">0xBEEF</span> is located at <span class="inline-code">0x0003</span>, and so on.</p>
<p>In DCPU assembly, we usually refer to addresses by enclosing them in [brackets]. In the example memory, we could say that <span class="inline-code">[0x0005]</span> is equal to <span class="inline-code">0xFACE</span>.</p>
<h4>The CPU Itself</h4>
<p>The actual DCPU is responsible for manipulating this memory to execute programs and store data. Let's have a look at our example program from last time. Assemble it again, but this time, use this command: "organic.exe helloworld.dasm --listing helloworld.lst". Organic will generate a listing file that looks something like this (I've simplified this version a bit):</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/aa5aaf680ec80001c6ce" macroAlias="Gist" />
<p>This will be important later - we'll talk about it more in a moment. First, we need to talk about registers.</p>
<p>So, in addition to 0x10000 words of memory, we also have <strong>registers</strong>. The DCPU-16 ships with 12 registers - 8 general purpose registers (referred to as A, B, C, X, Y, Z, I, and J), and 4 special purpose registers (referred to as PC, SP, EX, and IA). You can think of these as 16-bit variables that you can use in addition to memory. They can hold any value between 0x0000 and 0xFFFF, and you can use them to do various operations, like adding them together or storing them in memory. When the DCPU-16 starts up, all registers are set to zero.</p>
<p>Now that you know about those, let's look at that example file again. When it's loaded into the DCPU, the first bit of memory looks like this:</p>
<p class="code">1A00 88C3 84D2 8B83 1A20 7C12 F615 7C32 7349 B381 8B81 8401 7C21 8000 1A40 8401<br />8421 7C41 0024 7C20 0016 8B83 7C24 0020 0402 7C02 8000 8552 6381 2821 7C2B F000<br />0501 8802 8842 F381 0048 0065 006C 006C 006F 002C 0020 0077 006F 0072 006C 0064<br />0021 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000</p>
<p>Have a look at the listing file again - notice how the memory we have here corresponds to the values in each line of the listing. The assembler's job is to translate assembly code into these values, values that we then give to the DCPU to execute. Also pay special attention to things like "Hello world" - it's translated to the same stuff. And see those zeroes at the end? Keep in mind that this is just copied straight into memory, nothing special is done.</p>
<blockquote>
<p>Quick tip: memory and programs are the same thing. You can set memory with the SET instruction, which will allow you to not only store data, but modify executable memory. This even allows for fancy tricks like <strong>self-modifying code</strong>, which lets you change your code while it's running!</p>
</blockquote>
<p>This is where the CPU comes in. The CPU looks at the value at the address the PC register refers to (known as [PC]), and interprets it as an <strong>instruction</strong>, such as "HWN I". The CPU then <strong>executes</strong> that instruction, and moves on to the next one. Some instructions can do fancy stuff like moving PC somewhere else, or changing memory. So if PC is <span class="inline-code">0x0000</span>, the CPU will execute <span class="inline-code">[0x0000]</span>, which is <span class="inline-code">0x1A00</span>. <span class="inline-code">0x1A00</span> translates to <span class="inline-code">HWI I</span>, so the CPU executes that instruction.</p>
<h4>CPU Timing</h4>
<p>Computers don't operate instantaneously. It takes time to execute each instruction. But how much? Well, the stock DCPU-16 is clocked to 100 kHz (kilohertz). That means that it executes a <strong>cycle</strong> 100,000 times per second. This is the basis for timing on DCPU-16. Each instruction takes a certain number of cycles to execute. For instance, take the SET instruction. SET is used for moving data, such as <span class="inline-code">SET A, B</span> to set the A register to the value of the B register (A = B). <span class="inline-code">SET A, B</span> takes one cycle, or 10 microseconds. Each instruction has a base cycle count, and depending on how you use it, more cycles can be added. For example, when you load a constant number into a register, it can add another cycle, like <span class="inline-code">SET A, 100</span>. You can read the timings for all the instructions in the official <a href="http://dcpu.com/dcpu-16/" target="_blank">DCPU-16 specification</a>.</p>
<h4>Let's see an example</h4>
<p>Okay, so I've re-worked our example code to have a lot more detail. I explain what each thing does in the comments, which are ignored by the assembler. Comments are denoted by a semicolon (;), and continue to the end of the line. The code below shows these comments in gray - make sure you read them to get an idea of what's going on. Don't worry if you don't understand it all.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/d0de2b103ed011765685" macroAlias="Gist" />
<p>And there you have it! In the next article, we'll help you get started writing your own DCPU-16 programs from scratch.<em><br /></em></p>
<p><em>This is part of a series on getting started with DCPU-16 programming. <a href="/{localLink:1101}" title="Getting a Feel for Assembly">Click here</a> to read the next article.</em></p>]]></bodyText>
      </Article>
      <Article id="1101" parentID="1055" level="3" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="7" createDate="2012-11-01T14:38:17" updateDate="2012-11-02T01:38:39" nodeName="Getting a Feel for Assembly" urlName="getting-a-feel-for-assembly" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055,1101" isDoc="">
        <featured>0</featured>
        <summary><![CDATA[]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<p>You've got the tools, you understand more about how the DCPU works, and now it's time to have a little fun. I'll walk you through the steps in creating your very own DCPU-16 programs.</p>
<h4>A little help...</h4>
<p>Assembly is a little daunting at first, and DCPU-16 doesn't make it much easier - namely with regard to hardware initialization and basic routines. To make this easier on you, I've prepared a little assembly kit for you to use while you're learning so you can save the complicated stuff for a few articles down the line. You can download it <a href="/media/799/starter-kit.zip">right here</a>.</p>
<h4>Using the starter kit</h4>
<p>How does it work, you ask? Well, first unzip it and we'll take a look around. In <span class="inline-code">tools/</span>, we have Organic and Lettuce. In <span class="inline-code">extras/</span>, we have some helper code to do some heavy lifting for you. In the root is <span class="inline-code">template.dasm</span>, which is a template to make it easier for you to write code for, and <span class="inline-code">hello-world.dasm</span>, which is an example program using the starter kit. Last, but certainly not least, two scripts are included to help you out. On Windows, drag and drop a <span class="inline-code">.dasm</span> file to <span class="inline-code">assemble.bat</span> to assemble it, and drag the same file on to <span class="inline-code">debug.bat</span> to try it out. On Linux and Mac, the command is <span class="inline-code">./assemble.sh foo.dasm</span>, and <span class="inline-code">./debug.sh foo.dasm</span>. Try it out now with the <span class="inline-code">hello-world.dasm</span> example.</p>
<blockquote>
<p>On Linux or Mac, you might need to use <span class="inline-code">chmod +x assemble.sh &amp;&amp; chmod +x debug.ch</span> before you can use the helper scripts.</p>
</blockquote>
<h4>Exploring the starter kit</h4>
<p>We'll be starting out by recreating that hello world example from scratch, using the starter kit. Copy <span class="inline-code">template.dasm</span> to <span class="inline-code">lesson1.dasm</span>, and open it up in a text editor. It should look something like this:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/db830333ea75414c1974" macroAlias="Gist" />
<p>Let's have a look at this. Ignoring comments, the first line is this:</p>
<p class="code">#include &lt;boilerplate.dasm&gt;</p>
<p>To the assembler, <span class="inline-code">#include</span> means "insert the contents of a file into this one." In this case, it's using <span class="inline-code">boilerplate.dasm</span>. Note the <span class="inline-code">&lt;&gt;</span> around it - that means to load it from the include path, which the starter kit has set to <span class="inline-code">extras/</span>.</p>
<p>Next, we have the self-evident <span class="c inline-code">; Add your code here</span>.</p>
<p>Finally, the simple template ends with this:</p>
<p class="code">SET PC, end</p>
<p>This code loops around. When you see something like <span class="inline-code">end:</span> in code, it's a <strong>label</strong>. Basically, the assembler remembers the address of that label and allows you to use it again later in assembly, like we do on the next line. As you might guess <span class="inline-code">SET PC, end</span> loops forever, and that's how we're going to end our program. Let's go ahead and add in some of our own code.</p>
<h4>Saying Hello</h4>
<p>It's time to greet the user. We'll need to learn about two instructions to do this:</p>
<ul>
<li><span class="inline-code">SET register, value</span>: Sets the value of one <span class="inline-code">register</span> to a constant <span class="inline-code">value</span>.</li>
<li><span class="inline-code">JSR address</span>: Runs the <span class="inline-code">address</span> function. We'll describe this more later.</li>
</ul>
<p>Included in the starter kit is a function called <span class="inline-code">print_string</span>, which will output text to the screen. It outputs the text at [A], at X,Y on the screen, where A, X, and Y are registers.</p>
<p>But before we can use that, we need to add a string to be displayed. We'll use the assembler directive <span class="inline-code">.asciiz</span>, which translates text into data that print_string can use in the final output. Add this to the end of the file:</p>
<p class="code">message:<br />    .asciiz "Hello, world!"</p>
<blockquote>
<p>Make sure you add this <em>after </em>the <span class="inline-code">end:</span> loop. Code is just a special kind of data - you could accidentally run "Hello, world!" like code!</p>
</blockquote>
<p>Now that the string is included, we can display it with print_string. After <span class="inline-code">; Add your code here</span>, add the following code:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/881a8d32f6c360f51599" macroAlias="Gist" />
<p>Can you tell what this does? Remeber that print_string wants the X and Y positions in their respective registers, and the text in A. So, we set each register to those values, and then we can draw the string with <span class="inline-code">JSR print_string</span>.</p>
<h4>Wrapping Up</h4>
<p>Now that you've got your first program written, play around with it! Change the text, and move it around the screen. Maybe you could write several lines of text? Try to get a feel for playing around with the assembly. You should also try out some other routines from the starter kit, like <span class="inline-code">print_hex</span>, which is the same as <span class="inline-code">print_string</span>, except that it outputs the value of <span class="inline-code">A</span> in hexadecimal. There's <span class="inline-code">print_dec</span> (decimal), too! Maybe you could make a simple loop that counts up from 0 forever?</p>
<p>I suggest that you have a look at the <a href="http://dcpu.com/dcpu-16/" target="_blank">official specification</a> and play around a bit with the instructions listed there.</p>
<p>Here's the full code of the hello world demo:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/bfa38984f9d77192a50a" macroAlias="Gist" />
<p><em>This is part of a series on getting started with DCPU-16 programming. <a href="/{localLink:1108}" title="Learning About Program Flow">Click here</a> to read the next article.</em></p>]]></bodyText>
      </Article>
      <Article id="1102" parentID="1055" level="3" writerID="3" creatorID="3" nodeType="1050" template="1051" sortOrder="8" createDate="2012-11-01T14:42:09" updateDate="2012-11-01T16:23:57" nodeName="Higher Level Languages: C" urlName="higher-level-languages-c" writerName="jdiez" creatorName="jdiez" path="-1,1047,1055,1102" isDoc="">
        <featured>0</featured>
        <summary><![CDATA[]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<p>In this article, we'll take a look at a high level language, C. This allows you to work with a syntax similar to what you might be used to.</p>
<p>We'll create a build system and a program that displays an object which keeps spinning on its axis on the SPED-3 holographic display. To accomplish this, I'll use the DCPU Toolchain and standard UNIX tools like Makefile. This is also available on Windows through Cygwin.</p>
<blockquote>
<p>If you don't have the DCPU Toolchain, you can download it from <a href="http://dcputoolcha.in">the website</a>. </p>
</blockquote>
<h4 class="normal">Setting up the environment</h4>
<p>First of all, we'll need a little build system in order to be able to compile, assemble, link and run our solution in one single step. To help us with this, a little Makefile script will be very useful:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996515" macroAlias="Gist" />
<p>Note that this Makefile assumes you have extracted the contents of the Toolchain package to your home folder. If this is not the case, make sure you change the DT_PATH variable.</p>
<h4>Step 1: SPED-3 control functions</h4>
<p>The first thing we need to do is initialize the SPED-3. To achieve this, we'll need to use some inline assembly. This function initializes the SPED-3 display, telling it where the vertices are.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996585" macroAlias="Gist" />
<p>Don't worry too much about the specifics, but note how you can use the values of variables passed as parameters. </p>
<p>The next thing we'll need is a function to set the target rotation angle in the SPED-3. With a little bit of inline assembly magic, we can easily achieve this:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996623" macroAlias="Gist" />
<p>As you can see, this function is quite similar to <span class="inline-code">sped3_setup</span>. First, it tries to find the SPED-3 display and then it sets the target rotation.</p>
<blockquote>
<p>Want to know what those values for A mean? Check out the <a href="http://dcpu.com/3d-vector-display/">SPED-3 specification</a>.</p>
</blockquote>
<h4>Step 2: Rotate function</h4>
<p>Now that we have the low level functions laid down, we'll work on what we actually want the program to do: rotate the 3D object on its own axis. To do this, and since the SPED-3 has continuous rotation, we only need a simple loop which sets the angle to a value between 0 and 360. Additionally, we'll print that number to the screen.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996898" macroAlias="Gist" />
<p>You'll see that I've also added a function called <span class="inline-code">nop</span>. This is what's called a <strong>No-Op</strong>, which stands for No Operation. I use this function to delay the execution of the loop. In other words, it makes it slower, so we get a nice and steady rotation effect.</p>
<p>The loop is executed as follows: first, the angle is set <span class="inline-code">sped3_rotate</span>. Then, the DCPU waits for about 50 cycles and finally prints the number to the screen. </p>
<h4>Step 3: Set up the 3D object</h4>
<p>This is fairly straightforward: we set up a pointer to a location in memory where we will store the object. After that, we manually define the vertices. Going back to the SPED-3 specification, we'll see that each vertex takes 2 words in memory.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996942" macroAlias="Gist" />
<p> </p>
<blockquote>
<p>Can you write a function that generates these two words based on the x, y, z coordinates? </p>
</blockquote>
<h4>Step 4: Set up the SPED-3 and run the main loop</h4>
<p>Now that we have everything in place, we'll just use the functions we defined previously and finally execute an infinite loop that will run forever.</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3996997" macroAlias="Gist" />
<p>We're using two new things here: the <span class="inline-code">eputs</span> function is provided by the <a href="https://github.com/DCPUTeam/DCPUToolchain/tree/master/stdlib-c/src">standard library</a>. This gives you a convenient method for printing strings to a particular position in the screen.</p>
<p>Additionally, I use the <span class="inline-code">while(1) { ... }</span> loop to ensure it runs forever.</p>
<p>You can download all the files required to run this example <a href="/media/817/c-tutorial.zip">right here</a>.</p>]]></bodyText>
      </Article>
      <Article id="1108" parentID="1055" level="3" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="9" createDate="2012-11-01T21:29:31" updateDate="2012-11-02T02:27:19" nodeName="Learning About Program Flow" urlName="learning-about-program-flow" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1055,1108" isDoc="">
        <featured>0</featured>
        <summary><![CDATA[]]></summary>
        <umbracoNaviHide>0</umbracoNaviHide>
        <bodyText><![CDATA[<blockquote>
<p>This article's got a lot of content, but you'll learn some really cool stuff. Leave a comment if you get confused.</p>
</blockquote>
<p>Hopefully you've gotten a chance to play around with assembly and get a basic idea of how it works. Let's talk about how you can control execution flow around your program. First, create a new file based on <span class="inline-code">template.dasm</span> to use for this lesson. We're going to make a simple program to tell the user a different response based on which key they push.</p>
<p>By the end of this article, you'll be able to (and you will) write a program that does this:</p>
<ul>
<li>Loop until A or B is pressed on the keyboard</li>
<li>If A is pressed, display "You pressed A!"</li>
<li>If B is pressed, display "You pressed B!"</li>
</ul>
<p>But, before we can get to that, we have a lot of ground to cover. We'll start with branching.</p>
<h4>Basic branching</h4>
<p><strong>Branching</strong>, in computer science, means changing from one point of execution to another. The idea is to branch away from the current code and do something else. Recall that wherever PC points, the CPU is executing. As a result, with DCPU-16, you can branch with <span class="inline-code">SET PC, ...</span>. If you move PC around your program, you can jump from place to place. Take this example:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/c7a3d966ae2974448e92" macroAlias="Gist" />
<p>The A register is equal to 5 after that executes. This is because of <span class="inline-code">SET PC, foo</span> - it skips right over <span class="inline-code">SET A, 10</span>.</p>
<blockquote>
<p>Remember that anything with a colon at the end, like this: <span class="inline-code">example:</span>, is called a label, and you can use it to reference the address it appears at.</p>
</blockquote>
<p>Can you guess how to make an <a href="http://en.wiktionary.org/wiki/infinite_loop" target="_blank">infinite loop</a>?</p>
<div class="spoiler">
<p>Infinite loops are easy, like this:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/ba0de06bb7877c6b4ccb" macroAlias="Gist" />
<p>It works because PC is forever looping back to the same instruction - the one at <span class="inline-code">loop</span>.</p>
</div>
<h4>Conditional statements</h4>
<p>Most loops shouldn't be infinite, though. Let's look at conditionals. The DCPU-16 provides a lot to help you with this. Here's an excerpt from the official DCPU-16 specification:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/acfb43c16e52dffa89b2" macroAlias="Gist" />
<blockquote>
<p>This is part of the official specification. In that document, 'a' and 'b' in lowercase refers to any value - a register, a number, a [memory address], etc.</p>
</blockquote>
<p>All of these instructions are like "if" statements in languages like C. Let's say you want to add 1 to the I register, only if the Z register is not equal to 10. Here's how you'd do it:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/b8fb529b7775096e6e7b" macroAlias="Gist" />
<blockquote>
<p>We haven't talked about math yet. It's pretty straightforward - <a href="http://dcpu.com/dcpu-16/" target="_blank">read the specification</a> to learn all the instructions you can use.</p>
</blockquote>
<p>You can also stack these statements so that they cascade into each other. What if you wanted to add 10 to the I register, only if the Z register is not equal 10 and [0x1234] is less than 50:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/30cc4892ac45935a1abc" macroAlias="Gist" />
<p>Keep in mind that this only works for one instruction - you have to branch elsewhere with <span class="inline-code">SET PC, ...</span> if you need to do more. Most people usually indent cascading conditionals to make it more evident what's going on.</p>
<h4>Conditional loops</h4>
<p>Based on these ideas combined, you can make conditional loops. I have a feeling that you can get it on your own, but just in case, here's an example of looping until the A register is equal to 100:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/34ec9ec1e1e11a94cade" macroAlias="Gist" />
<blockquote>
<p>This particular loop will exit even if A is more than 100 because of <a href="http://en.wikipedia.org/wiki/Integer_overflow" target="_blank">integer overflow</a> - when A reaches 0xFFFF, adding 1 will bring it back to 0.</p>
</blockquote>
<h4>Using the stack</h4>
<p>And now we get to one of the more complex parts of DCPU-16 programming - the <strong>stack</strong>. Remember the special-purpose register SP? It's short for Stack Pointer, and it's used to manipulate the stack.</p>
<p>The stack is a good place to put things you need to use later, and you can retrieve them again afterwards. Keep in mind that the stack is aptly named - try to have the mental image of a stack of papers in your mind as we go through this.</p>
<p>This is how it works - you can use the pseudo-registers <span class="inline-code">PUSH</span> and <span class="inline-code">POP</span> to manipulate the stack. PUSH will "push" a value on top of the stack. Inversely, POP will "pop" a value off of the stack, and into a register or other value. Let's say you use this: <span class="inline-code">SET PUSH, 25</span>. The CPU loads 25 into the end of stack memory, effectively placing 25 on top of the stack.</p>
<p>Later, you can do this: <span class="inline-code">SET A, POP</span>, and A will become 25, popping that value off the stack. The stack is a <a href="http://en.wikipedia.org/wiki/LIFO_%28computing%29" target="_blank">last-in-first-out system</a>, meaning that the last value you PUSHed is the first value that will be POPed. Check out this example:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/dde93e5bee89d40ea5e5" macroAlias="Gist" />
<blockquote>
<p>Still confused? Think of it like this: <span class="inline-code">SET PUSH, 25</span> is like writing 25 on a paper and putting it on the stack of papers. <span class="inline-code">SET A, POP</span> is like picking that paper back up and putting it in the "A" bin.</p>
</blockquote>
<p>Well, why is this useful? If you want to save the value of some registers for later, but still use it when you need it, this could be useful. For example, let's say that you're using <em>all</em> the general purpose registers for something important, but you need to use A for something:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/7b17484ab21f0a5d95bc" macroAlias="Gist" />
<blockquote>
<p>A lot of people add indentation when they use the stack so they don't lose track. This is important because you should be careful not to mismatch PUSHes and POPs. If you do, it could have unintentional consequences, so ensure that every time you use PUSH, there's a corresponding POP.</p>
</blockquote>
<h4>Functions with the stack</h4>
<p>The stack enables a very important practice - functions, or subroutines. There's a special instruction that allows you to use this: <span class="inline-code">JSR ...</span>. It stands for "<strong>Jump to SubRoutine</strong>." It PUSHes PC to the stack, then sets PC to <span class="inline-code">...</span>. This means that you can make subroutines quite easily. You can use <span class="inline-code">JSR ...</span> to call a subroutine, and <span class="inline-code">SET PC, POP</span> to return to where you left off. Here's a quick example of calling a subroutine several times in a loop:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/daa726d9d1cd8fe9ad42" macroAlias="Gist" />
<p>This example is a little bit simple, but I'm sure you can understand the thought behind it. Subroutines are also useful for doing multiple things in an IF statement - you can just jump to a subroutine and come straight back to where you were.</p>
<h4>Putting all of this together</h4>
<blockquote>
<p>If you don't have the <a href="/media/799/starter-kit.zip">starter kit</a> yet, now's the time to get it.</p>
</blockquote>
<p>Finally, we've learned all we need to put together the program we described at the top of the article. Thanks for sticking around long enough to get here. Let's talk about what we'll need to do in more detail:</p>
<ul>
<li>The starter kit provides a <span class="inline-code">get_key</span> function to help you use the keyboard. Create a loop that uses <span class="inline-code">get_key</span> to look for input from the keyboard.</li>
<li>If the key pressed is either 'a' or 'b', branch to the correct handler.</li>
<li>Create two seperate handlers for displaying each message.</li>
</ul>
<p>I suggest you take a moment to see if you can't do this on your own. Don't worry if you can't - we'll walk through it below. Go ahead and open up the file you made at the start, the copy of <span class="inline-code">template.dasm</span>.</p>
<blockquote>
<p>You can use characters in your assembly like this: <span class="inline-code">SET A, 'f'</span>.</p>
</blockquote>
<p>First, we'll create the main loop. Add this after <span class="inline-code">; Add your code here</span>:</p>
<p class="code">loop:<br />    JSR get_key<br />    SET PC, loop</p>
<p>When you call <span class="inline-code">get_key</span>, it sets the value A to the pressed key, or zero if no keys are pressed. Let's add some IF statements to handle each scenario in our program.</p>
<p class="code">loop:<br />    JSR get_key<br />    IFE A, 'a'<br />        SET PC, keypress_a<br />    IFE A, 'b'<br />        SET PC, keypress_b<br />    SET PC, loop</p>
<p>After <span class="inline-code">SET PC, loop</span>, let's add these two handlers. I'll show <span class="inline-code">keypress_a</span> here, and let you handle <span class="inline-code">keypress_b</span>.</p>
<p class="code">keypress_a:<br />    SET X, 0<br />    SET Y, 0<br />    SET A, message_a<br />    JSR print_string<br />    SET PC, end<br />message_a:<br />    .asciiz "You pressed A!"</p>
<p>Here, we simply call <span class="inline-code">print_string</span>, like in our earlier examples.</p>
<h4>Wrapping up</h4>
<p>Alright, hopefully you've learned a considerable amount in the article. You should be able to make a lot of DCPU-16 programs with this knowledge. Here's a couple things for you to try with this article's example:</p>
<ul>
<li>Open up <span class="inline-code">boilerplate.dasm</span> and read <span class="inline-code">get_key</span>. See if you can figure out <a href="http://dcpu.com/keyboard/" target="_blank">how it works</a>.</li>
<li>Try to make it generic. Have it show any key you press, without writing handlers for each one.</li>
</ul>
<p>Here's the final example code from this article:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/3fbddb9fe1570eb39dbb" macroAlias="Gist" />
<p><em>This is part of a series on getting started with DCPU-16 programming. The next installment will be out soon.</em></p>]]></bodyText>
      </Article>
    </Folder>
    <Folder id="1064" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1052" template="0" sortOrder="1" createDate="2012-10-30T22:13:24" updateDate="2012-10-30T22:14:44" nodeName="Author" urlName="author" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1064" isDoc="">
      <AuthorProfile id="1068" parentID="1064" level="3" writerID="0" creatorID="0" nodeType="1067" template="1066" sortOrder="0" createDate="2012-10-30T22:19:42" updateDate="2012-10-30T22:25:09" nodeName="SirCmpwn" urlName="sircmpwn" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1064,1068" isDoc="">
        <emailAddress>sir@cmpwn.com</emailAddress>
        <title>10c.co Administrator</title>
        <bodyText><![CDATA[<p>Drew DeVault, aka <a href="http://sircmpwn.github.com/" target="_blank">SirCmpwn</a>, is a C# developer out of Colorado. In the DCPU-16 scene, he administrates this website, and has also created the open-source BLT stack of tools.</p>
<ul>
<li><a href="https://github.com/SirCmpwn/organic" target="_blank">Organic</a> - A powerful DCPU-16 assembler</li>
<li><a href="https://github.com/SirCmpwn/inorganic" target="_blank">Inorganic</a> - A DCPU-16 disassembler</li>
<li><a href="https://github.com/SirCmpwn/Tomato" target="_blank">Tomato</a> - A .NET DCPU-16 emulation library</li>
<li><a href="https://github.com/0x42c/" target="_blank">0x42c</a> - Design lead for 0x42c-kernel</li>
</ul>]]></bodyText>
      </AuthorProfile>
      <AuthorProfile id="1091" parentID="1064" level="3" writerID="3" creatorID="3" nodeType="1067" template="1066" sortOrder="1" createDate="2012-10-31T15:57:53" updateDate="2012-10-31T16:04:12" nodeName="jdiez" urlName="jdiez" writerName="jdiez" creatorName="jdiez" path="-1,1047,1064,1091" isDoc="">
        <emailAddress>me@jdiez.me</emailAddress>
        <title>10c.co Editor</title>
        <bodyText><![CDATA[<p>My name is José Manuel Díez, and as you have probably guessed, I'm Spanish. I'm an editor at 10c.co, and I develop the <a href="http://dcputoolcha.in/">DCPU Toolchain</a>. I am also a developer at <a href="http://github.com/0x42c">0x42c</a>.</p>]]></bodyText>
      </AuthorProfile>
    </Folder>
    <Page id="1056" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1048" template="1049" sortOrder="2" createDate="2012-10-30T19:50:37" updateDate="2012-11-02T01:39:14" nodeName="Getting Started" urlName="getting-started" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1056" isDoc="">
      <subtitle><![CDATA[<p>A list of resources you'll need to get started with DCPU-16 programming today.</p>]]></subtitle>
      <bodyText><![CDATA[<p>10c.co offers a selection of articles targeted towards the beginner. These are designed to help you learn how to use DCPU-16 assembly and introduce you to the tools you need.</p>
<blockquote>
<p>These articles aren't all finished, so stay tuned as more are released.</p>
</blockquote>
<h4><a href="/articles/getting-the-tools-for-dcpu-16-programming/">Getting the Tools for DCPU-16 Programming</a></h4>
<p>This is the first article you should read. It goes over all the details on setting up the BLT toolchain to help you get your feet wet. At the end, you'll try out a simple program to test it all out and see how it works. <a href="/{localLink:1092}" title="Getting the Tools for DCPU-16 Programming">Read it here</a>.</p>
<h4><a href="/articles/how-dcpu-16-works/">How DCPU-16 Works</a></h4>
<p>This next article will help you understand exactly what's going on here. It describes everything you need to know to understand how your assembler works, how emulators work, and how 0x10c itself will eventually work. <a href="/{localLink:1099}" title="How DCPU-16 Works">Read it here</a>.</p>
<h4><a href="/articles/getting-a-feel-for-assembly/">Getting a Feel for Assembly</a></h4>
<p>This article starts you out nice and easy, familiarizing you with the basic concepts of assembly. You'll be walked through a few simple programs to get going, and the building blocks will be set for the future. <a href="/{localLink:1101}" title="Getting a Feel for Assembly">Read it here</a>.</p>
<h4><a href="/{localLink:1108}" title="Learning About Program Flow">Program Flow</a></h4>
<p>It's about time you learned how to control the execution of your program. We'll learn about conditionals, the stack, and basic control flow with loops and more. <a href="/{localLink:1108}" title="Learning About Program Flow">Read it here</a>.</p>
<h4>Bitwise Operations</h4>
<p>Any low-level programmer must have clear knowledge of bitwise operations. DCPU-16 provides several instructions for bitwise operations, and this article covers how they work, how to use them, and bitwise math in general.</p>
<h4>Hardware</h4>
<p>Your DCPU-16 can have many kinds of devices attached to it - screens, 3D projectors, keyboards, and more. Until now, you've been using our sample code that works with this for you - now, we'll show you how you can work with devices yourself.</p>]]></bodyText>
      <umbracoNaviHide>0</umbracoNaviHide>
    </Page>
    <Page id="1074" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1048" template="1049" sortOrder="3" createDate="2012-10-30T23:52:28" updateDate="2012-11-01T17:07:01" nodeName="Projects" urlName="projects" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1074" isDoc="">
      <subtitle><![CDATA[<p>All the hottest projects in the DCPU-16 scene.</p>]]></subtitle>
      <bodyText><![CDATA[<p>Want your project listed? Shoot an email to <a href="mailto:projects@10c.co">projects@10c.co</a>. Read through our <a href="/{localLink:1075}" title="Featured Project Guidelines">featured project guidelines</a> first.</p>
<h4>Assemblers</h4>
<p>Assemblers are around to help you turn your code into executables. Check these projects out:</p>
<ul>
<li><a href="https://github.com/SirCmpwn/organic" target="_blank">Organic</a> - With support for macros, equates, local labels, and more!<a href="https://github.com/SirCmpwn/organic" target="_blank"></a></li>
<li><a href="http://dcputoolcha.in/" target="_blank">DCPU Toolchain</a> - With the included linker, you can write extremely portable code.</li>
</ul>
<h4>Emulators</h4>
<p>You've got to test all that code you've written - here's how you can.</p>
<ul>
<li><a href="https://github.com/SirCmpwn/Tomato" target="_blank">Lettuce</a> - With a great graphical debugger for beginners and veterans alike.</li>
<li><a href="http://dcputoolcha.in/" target="_blank">DCPU Toolchain</a> - The powerful CLI debugger allows you to deeply inspect your code.</li>
</ul>
<h4>DCPU-16</h4>
<p>Some pretty cool projects are out there - maybe you could contribute to a few?</p>
<ul>
<li><a href="http://github.com/0x42c" target="_blank">0x42c</a> - A multitasking unix-inspired modular kernel and OS.</li>
</ul>
<h4>Websites</h4>
<p>A shout out to all the great community sites out there.</p>
<ul>
<li><a href="http://0x10c.com" target="_blank"><strong>The official 0x10c website</strong></a></li>
<li><a href="http://dcpu.com" target="_blank"><strong>The official DCPU-16 website</strong></a></li>
<li><a href="http://reddit.com/r/0x10c" target="_blank">The official 0x10c subreddit</a></li>
<li><a href="http://reddit.com/r/dcpu16" target="_blank">The official DCPU-16 subreddit</a></li>
<li><a href="http://0x10co.de" target="_blank">0x10co.de, an online code-sharing resource</a></li>
</ul>]]></bodyText>
      <umbracoNaviHide>0</umbracoNaviHide>
    </Page>
    <Page id="1081" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1048" template="1049" sortOrder="4" createDate="2012-10-31T02:00:23" updateDate="2012-11-01T21:29:03" nodeName="About" urlName="about" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1081" isDoc="">
      <subtitle><![CDATA[<p>10c.co is a pretty neat domain name</p>]]></subtitle>
      <bodyText><![CDATA[<p>So, what is this place?</p>
<p>Well, the idea is to provide a medium for the 0x10c community to share news and articles related to the game, with an emphasis on DCPU-16. Anyone can become a writer, just have a look our <a href="/{localLink:1082}" title="Article Submission Guidelines">guidelines</a>. On the front page, a regular stream of new community-submitted content will be posted, with the occasional exceptional articles being featured all special-like.</p>
<p>If you want, we can also give some traffic to your <a href="/projects/">projects</a>, either through articles or the project listings. You could even get us to host some web pages about your project information if you <a href="mailto:admin@10c.co">ask nicely</a>.</p>
<p>So, what do you do here?</p>
<p>Well, I imagine that most people just want to browse. That's cool with me. Hit up the <a href="/{localLink:1047}" title="Home">front page</a> for the site-wide news.</p>
<p>Also, it's good to note that all articles and content is released under the <a href="http://opensource.org/licenses/MIT" target="_blank">MIT license</a>.</p>
<h4>Philosophies</h4>
<p>We are a pretty simple bunch here, but there are a few core things we believe in:</p>
<ul>
<li>Freedom of press - anyone with quality, on-topic content can have it posted here.</li>
<li>Community interaction - we want to spread knowledge and support for projects in the community, and to facilitate discussion about it.</li>
<li>Open source - We love open source, and we require that any projects featured are open source. Even this website is built with the open-source <a href="http://umbraco.org" target="_blank">Umbraco project</a>.</li>
</ul>]]></bodyText>
      <umbracoNaviHide>0</umbracoNaviHide>
    </Page>
    <Page id="1075" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1048" template="1049" sortOrder="5" createDate="2012-10-31T00:03:11" updateDate="2012-11-02T01:08:47" nodeName="Featured Project Guidelines" urlName="featured-project-guidelines" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1075" isDoc="">
      <subtitle><![CDATA[<p>So you want us to pimp your project.</p>]]></subtitle>
      <bodyText><![CDATA[<p>There are only a few guidelines:</p>
<ul>
<li>Your project must be open source, free, and have commits more recent than one month ago.</li>
<li>Your project must be DCPU-16 related.</li>
<li>You should submit a summary of your project in about 10 words.</li>
<li>Your project must be up-to-date with current official DCPU standards.</li>
</ul>
<p>Sounds good? Then <a href="mailto:projects@10c.co">shoot us an email</a> telling us why your project is special.</p>]]></bodyText>
      <umbracoNaviHide>1</umbracoNaviHide>
    </Page>
    <Page id="1082" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1048" template="1049" sortOrder="6" createDate="2012-10-31T09:36:55" updateDate="2012-10-31T09:40:25" nodeName="Article Submission Guidelines" urlName="article-submission-guidelines" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1082" isDoc="">
      <subtitle><![CDATA[<p>We want you to make great content for us!</p>]]></subtitle>
      <bodyText><![CDATA[<p>You want to submit an article? Great! We'd be happy to host it for you, so long as you meet these guidelines:</p>
<ul>
<li>Articles must be written in English, with no spelling or grammatical errors</li>
<li>All code provided in your article must work properly unless intentionally broken</li>
<li>All projects you feature in your article must adhere to the <a href="/{localLink:1075}" title="Featured Project Guidelines">Featured Project Guidelines</a></li>
</ul>
<p>Sounds good? Then shoot us an email at <a href="mailto:articles@10c.co">articles@10c.co</a>.</p>
<p> </p>]]></bodyText>
      <umbracoNaviHide>1</umbracoNaviHide>
    </Page>
    <Article id="1089" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1050" template="1051" sortOrder="7" createDate="2012-10-31T12:09:16" updateDate="2012-11-01T00:47:07" nodeName="Tips for Authors" urlName="tips-for-authors" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1089" isDoc="">
      <featured>0</featured>
      <summary><![CDATA[]]></summary>
      <umbracoNaviHide>1</umbracoNaviHide>
      <bodyText><![CDATA[<p>It can be pretty simple to create articles. To start, you'll want to go to the <a href="/umbraco/">server back-end</a> and log in. Once you're there, you'll see your content folder - this is where you can place all of your content to work on. It's your own personal sandbox, and you're free to add whatever you like. When you're done, drop a line to your favorite editor and they'll review it and publish it.</p>
<h4>Author Profiles</h4>
<p>The first thing a new author should do is create an author profile. Right click your content folder and hit "Create", then select "Author Profile" from the drop-down. Fill this with your information and hit "Save and Publish" on the toolbar. Let an editor know that you're done, and it'll go live.</p>
<h4>Writing Articles</h4>
<p>Right click on your content folder and hit "Create", then select "Article". You'll be able to edit your article here. You'll see three fields - Featured, Summary, and Content. Leave "featured" alone - editors will deal with that. The summary should be the first paragraph of your article, or a video. This will be shown in the article list, and when the article is featured.</p>
<p>The most important part is the Content field. Here, you can add your article. On the toolbar, you'll be able to change the style (bold, italic, etc), add pictures, and more.</p>
<blockquote>
<p>You can make a note like this by selecting "Note" from the style drop-down.</p>
</blockquote>
<p>Other styles include subheaders, like "Author Profiles" and "Writing Articles" on this page, as well as "left" and "right" for floating images to either side.</p>
<p>Importantly, if you want to embed a YouTube video or a GitHub gist, you can click the orange macro icon towards the right of the toolbar and follow the instructions. Please note, <strong>all code should be in the form of an embedded gist</strong>. Here's an example:</p>
<?UMBRACO_MACRO gistid="https://gist.github.com/b02592a7e93f3f9381aa" macroAlias="Gist" />
<p>And here's an example of a YouTube video:</p>
<?UMBRACO_MACRO macroAlias="YouTubeVideo" videoid="https://www.youtube.com/watch?v=djV11Xbc914" />
<p>Each of these "macros" accepts a URL - just give it a YouTube video URL or a Gist URL and it'll figure out the rest automagically.</p>
<h4>Adding Media</h4>
<p>If you wish to include images in your article, you'll need to add them in the Media section of the server back-end. You'll see it on the bottom-left of the page. You have your own media folder, which you can add images to the same way you add articles to the Content section. You're free to organize this however you please. When you've added an image in the Media section, head back to your article and click the picture icon on the right side of the toolbar. Select your image and you're good to go. Make sure you don't forget to save your article before you head over to the media section.</p>
<h4>Videos</h4>
<p>There are a few guidelines for including videos in your article. First of all, that video should be in the summary section of the article, and nothing else. Secondly, it should appear as the first thing in the article, before any text. You should upload all videos to YouTube and embed them with a macro (see instructions above). If you're just showing a cool video (not a tutorial), the rest of the guidelines don't apply. Otherwise, you should use <a href="/media/543/background.png">this picture</a> as your wallpaper, and make all important text on them at least 18pt. Note that your corresponding article should teach you everything you'd learn from the video - the video is just an accompaniment. All videos should be recorded in at least 780p HD, but ideally in 1080p HD.</p>
<h4>General Tips</h4>
<p>When you've finished your article, let your favorite editor know that it's done. We'll give it a review, let you know if it needs to change, and publish it. Make sure you keep spelling and grammar in mind at all times to avoid headache for our editors. Have fun!</p>]]></bodyText>
    </Article>
    <Search id="1107" parentID="1047" level="2" writerID="0" creatorID="0" nodeType="1105" template="1106" sortOrder="8" createDate="2012-11-01T21:08:26" updateDate="2012-11-01T21:08:29" nodeName="Search" urlName="search" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1047,1107" isDoc="" />
  </Home>
  <Folder id="1053" parentID="-1" level="1" writerID="0" creatorID="0" nodeType="1052" template="0" sortOrder="1" createDate="2012-10-30T19:49:45" updateDate="2012-10-30T19:49:47" nodeName="Staging" urlName="staging" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1053" isDoc="">
    <Folder id="1054" parentID="1053" level="2" writerID="0" creatorID="0" nodeType="1052" template="0" sortOrder="0" createDate="2012-10-30T19:50:12" updateDate="2012-10-30T19:50:14" nodeName="Articles" urlName="articles" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1053,1054" isDoc="">
      <Folder id="1093" parentID="1054" level="3" writerID="0" creatorID="0" nodeType="1052" template="0" sortOrder="1" createDate="2012-11-01T00:08:52" updateDate="2012-11-01T00:09:00" nodeName="mappum" urlName="mappum" writerName="SirCmpwn" creatorName="SirCmpwn" path="-1,1053,1054,1093" isDoc="" />
    </Folder>
  </Folder>
</root>